{"ast":null,"code":"import { of } from 'rxjs';\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../product.service\";\nexport let ProductEffects = /*#__PURE__*/(() => {\n  class ProductEffects {\n    constructor(actions$, productService) {\n      this.actions$ = actions$;\n      this.productService = productService;\n      this.loadProducts$ = createEffect(() => {\n        return this.actions$.pipe(ofType(ProductActions.loadProducts), mergeMap(() => this.productService.getProducts().pipe(map(products => ProductActions.loadProductsSuccess({\n          products\n        })), catchError(error => of(ProductActions.loadProductsFailure({\n          error\n        }))))));\n      });\n    }\n\n  }\n\n  ProductEffects.ɵfac = function ProductEffects_Factory(t) {\n    return new (t || ProductEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService));\n  };\n\n  ProductEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductEffects,\n    factory: ProductEffects.ɵfac\n  });\n  return ProductEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}