{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { of } from 'rxjs';\nimport { mergeMap, map, catchError } from 'rxjs/operators';\nimport { Effect, ofType } from '@ngrx/effects';\nimport * as productActions from './product.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../product.service\";\nimport * as i2 from \"@ngrx/effects\";\nexport class ProductEffects {\n  constructor(productService, actions$) {\n    this.productService = productService;\n    this.actions$ = actions$;\n    this.loadProducts$ = this.actions$.pipe(ofType(productActions.ProductActionTypes.Load), mergeMap(action => this.productService.getProducts().pipe(map(products => new productActions.LoadSuccess(products)), catchError(err => of(new productActions.LoadFail(err))))));\n    this.updateProduct$ = this.actions$.pipe(ofType(productActions.ProductActionTypes.UpdateProduct), map(action => action.payload), mergeMap(product => this.productService.updateProduct(product).pipe(map(updatedProduct => new productActions.UpdateProductSuccess(updatedProduct)), catchError(err => of(new productActions.UpdateProductFail(err))))));\n    this.createProduct$ = this.actions$.pipe(ofType(productActions.ProductActionTypes.CreateProduct), map(action => action.payload), mergeMap(product => this.productService.createProduct(product).pipe(map(newProduct => new productActions.CreateProductSuccess(newProduct)), catchError(err => of(new productActions.CreateProductFail(err))))));\n    this.deleteProduct$ = this.actions$.pipe(ofType(productActions.ProductActionTypes.DeleteProduct), map(action => action.payload), mergeMap(productId => this.productService.deleteProduct(productId).pipe(map(() => new productActions.DeleteProductSuccess(productId)), catchError(err => of(new productActions.DeleteProductFail(err))))));\n  }\n\n}\n\nProductEffects.ɵfac = function ProductEffects_Factory(t) {\n  return new (t || ProductEffects)(i0.ɵɵinject(i1.ProductService), i0.ɵɵinject(i2.Actions));\n};\n\nProductEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductEffects,\n  factory: ProductEffects.ɵfac\n});\n\n__decorate([Effect()], ProductEffects.prototype, \"loadProducts$\", void 0);\n\n__decorate([Effect()], ProductEffects.prototype, \"updateProduct$\", void 0);\n\n__decorate([Effect()], ProductEffects.prototype, \"createProduct$\", void 0);\n\n__decorate([Effect()], ProductEffects.prototype, \"deleteProduct$\", void 0);","map":null,"metadata":{},"sourceType":"module"}