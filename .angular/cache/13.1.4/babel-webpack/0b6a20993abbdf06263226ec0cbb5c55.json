{"ast":null,"code":"import { ProductActionTypes } from './product.actions';\nconst initialState = {\n  showProductCode: true,\n  currentProductId: null,\n  products: [],\n  error: ''\n};\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case ProductActionTypes.ToggleProductCode:\n      return Object.assign(Object.assign({}, state), {\n        showProductCode: action.payload\n      });\n\n    case ProductActionTypes.SetCurrentProduct:\n      return Object.assign(Object.assign({}, state), {\n        currentProductId: action.payload.id\n      });\n\n    case ProductActionTypes.ClearCurrentProduct:\n      return Object.assign(Object.assign({}, state), {\n        currentProductId: null\n      });\n\n    case ProductActionTypes.InitializeCurrentProduct:\n      return Object.assign(Object.assign({}, state), {\n        currentProductId: 0\n      });\n\n    case ProductActionTypes.LoadSuccess:\n      return Object.assign(Object.assign({}, state), {\n        products: action.payload,\n        error: ''\n      });\n\n    case ProductActionTypes.LoadFail:\n      return Object.assign(Object.assign({}, state), {\n        products: [],\n        error: action.payload\n      });\n\n    case ProductActionTypes.UpdateProductSuccess:\n      const updatedProducts = state.products.map(item => action.payload.id === item.id ? action.payload : item);\n      return Object.assign(Object.assign({}, state), {\n        products: updatedProducts,\n        currentProductId: action.payload.id,\n        error: ''\n      });\n\n    case ProductActionTypes.UpdateProductFail:\n      return Object.assign(Object.assign({}, state), {\n        error: action.payload\n      });\n    // After a create, the currentProduct is the new product.\n\n    case ProductActionTypes.CreateProductSuccess:\n      return Object.assign(Object.assign({}, state), {\n        products: [...state.products, action.payload],\n        currentProductId: action.payload.id,\n        error: ''\n      });\n\n    case ProductActionTypes.CreateProductFail:\n      return Object.assign(Object.assign({}, state), {\n        error: action.payload\n      });\n    // After a delete, the currentProduct is null.\n\n    case ProductActionTypes.DeleteProductSuccess:\n      return Object.assign(Object.assign({}, state), {\n        products: state.products.filter(product => product.id !== action.payload),\n        currentProductId: null,\n        error: ''\n      });\n\n    case ProductActionTypes.DeleteProductFail:\n      return Object.assign(Object.assign({}, state), {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}