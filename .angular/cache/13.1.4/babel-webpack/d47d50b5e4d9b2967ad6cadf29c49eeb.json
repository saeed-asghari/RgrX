{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { GenericValidator } from '../../shared/generic-validator';\nimport { NumberValidators } from '../../shared/number.validator';\nlet ProductEditComponent = class ProductEditComponent {\n  constructor(store, fb, productService) {\n    this.store = store;\n    this.productService = productService;\n    this.pageTitle = 'Product Edit';\n    this.errorMessage = ''; // Use with the generic validation message class\n\n    this.displayMessage = {}; // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n\n    this.validationMessages = {\n      productName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.'\n      },\n      productCode: {\n        required: 'Product code is required.'\n      },\n      starRating: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).'\n      }\n    }; // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit() {\n    // Define the form group\n    this.productForm = this.fb.group({\n      productName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      productCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      description: ''\n    }); // Watch for changes to the currently selected product\n\n    this.sub = this.productService.selectedProductChanges$.subscribe(currentProduct => this.displayProduct(currentProduct)); // Watch for value changes for validation\n\n    this.productForm.valueChanges.subscribe(() => this.displayMessage = this.genericValidator.processMessages(this.productForm));\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  } // Also validate on blur\n  // Helpful if the user tabs through required fields\n\n\n  blur() {\n    this.displayMessage = this.genericValidator.processMessages(this.productForm);\n  }\n\n  displayProduct(product) {\n    // Set the local product property\n    this.product = product;\n\n    if (product) {\n      // Reset the form back to pristine\n      this.productForm.reset(); // Display the appropriate page title\n\n      if (product.id === 0) {\n        this.pageTitle = 'Add Product';\n      } else {\n        this.pageTitle = `Edit Product: ${product.productName}`;\n      } // Update the data on the form\n\n\n      this.productForm.patchValue({\n        productName: product.productName,\n        productCode: product.productCode,\n        starRating: product.starRating,\n        description: product.description\n      });\n    }\n  }\n\n  cancelEdit(product) {\n    // Redisplay the currently selected product\n    // replacing any edits made\n    this.displayProduct(product);\n  }\n\n  deleteProduct(product) {\n    if (product && product.id) {\n      if (confirm(`Really delete the product: ${product.productName}?`)) {\n        this.productService.deleteProduct(product.id).subscribe({\n          next: () => this.productService.changeSelectedProduct(null),\n          error: err => this.errorMessage = err\n        });\n      }\n    } else {\n      // No need to delete, it was never saved\n      this.productService.changeSelectedProduct(null);\n    }\n  }\n\n  saveProduct(originalProduct) {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        // Copy over all of the original product properties\n        // Then copy over the values from the form\n        // This ensures values not on the form, such as the Id, are retained\n        const product = Object.assign(Object.assign({}, originalProduct), this.productForm.value);\n\n        if (product.id === 0) {\n          this.productService.createProduct(product).subscribe({\n            next: p => this.productService.changeSelectedProduct(p),\n            error: err => this.errorMessage = err\n          });\n        } else {\n          this.productService.updateProduct(product).subscribe({\n            next: p => this.productService.changeSelectedProduct(p),\n            error: err => this.errorMessage = err\n          });\n        }\n      }\n    }\n  }\n\n};\nProductEditComponent = __decorate([Component({\n  selector: 'pm-product-edit',\n  templateUrl: './product-edit.component.html'\n})], ProductEditComponent);\nexport { ProductEditComponent };","map":null,"metadata":{},"sourceType":"module"}